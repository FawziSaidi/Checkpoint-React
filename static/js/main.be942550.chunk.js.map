{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","class","type","id","placeholder","for","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPA+CeA,MA3Cf,WACE,OACE,yBAAKC,UAAU,OACb,6BAASC,MAAM,iBACd,yBAAKA,MAAM,QACV,yBAAKA,MAAM,8BACT,yBAAKA,MAAM,qCACT,wBAAIA,MAAM,yCAAV,aAEJ,yBAAKA,MAAM,+CACP,uBAAGA,MAAM,uBAAsB,uBAAGA,MAAM,wCACxC,uBAAGA,MAAM,uBAAsB,uBAAGA,MAAM,qCACxC,uBAAGA,MAAM,0BAAyB,uBAAGA,MAAM,6CAG/C,yBAAKA,MAAM,uBACT,yBAAKA,MAAM,WACT,2BAAOC,KAAK,OAAOC,GAAG,cAAcF,MAAM,eAAeG,YAAY,qBACrE,2BAAOC,IAAI,eAAX,eAEF,yBAAKJ,MAAM,wBACT,2BAAOC,KAAK,WAAWC,GAAG,aAAaF,MAAM,eAAgBG,YAAY,8FACzE,2BAAOC,IAAI,cAAX,iBAEA,uBAAGJ,MAAM,mDAAT,UAAkE,uBAAGK,KAAK,IAAIL,MAAM,wCAAlB,eAEpE,yBAAKA,MAAM,sCACT,yBAAKA,MAAM,8CACT,yBAAKA,MAAM,eACT,4BAAQC,KAAK,SAASD,MAAM,uCAA5B,YAGJ,yBAAKA,MAAM,YACT,uBAAGA,MAAM,wDAAT,0BAAuF,uBAAGK,KAAK,IAAIL,MAAM,wCAAlB,oBCzBjFM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be942550.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section class=\"form-gradient\">\n       <div class=\"card\">\n        <div class=\"header pt-3 peach-gradient\">\n          <div class=\"row d-flex justify-content-center\">\n            <h3 class=\"white-text mb-3 pt-3 font-weight-bold\">Register</h3>\n          </div>\n        <div class=\"row mt-2 mb-3 d-flex justify-content-center\">\n            <a class=\"fa-lg p-2 m-2 fb-ic\"><i class=\"fab fa-facebook-f white-text fa-lg\"></i></a>\n            <a class=\"fa-lg p-2 m-2 tw-ic\"><i class=\"fab fa-twitter white-text fa-lg\"></i></a>\n            <a class=\"fa-lg p-2 m-2 gplus-ic\"><i class=\"fab fa-google-plus-g white-text fa-lg\"></i></a>\n          </div>\n        </div>\n        <div class=\"card-body mx-4 mt-4\">\n          <div class=\"md-form\">\n            <input type=\"text\" id=\"Form-email3\" class=\"form-control\" placeholder=\"name@example.com\"/>\n            <label for=\"Form-email3\">Your email</label>\n          </div>\n          <div class=\"md-form pb-1 pb-md-3\">\n            <input type=\"password\" id=\"Form-pass3\" class=\"form-control\"  placeholder=\"Please choose a password atleast 8 characters long, using diversified chains of numbers..\"/>\n            <label for=\"Form-pass3\">Your password</label>\n\n            <p class=\"font-small grey-text d-flex justify-content-end\">Forgot <a href=\"#\" class=\"dark-grey-text ml-1 font-weight-bold\">Password?</a></p>\n          </div>\n          <div class=\"row d-flex align-items-center mb-4\">\n            <div class=\"col-md-1 col-md-5 d-flex align-items-start\">\n              <div class=\"text-center\">\n                <button type=\"button\" class=\"btn btn-grey btn-rounded z-depth-1a\">Log in</button>\n              </div>\n            </div>\n            <div class=\"col-md-7\">\n              <p class=\"font-small grey-text d-flex justify-content-end mt-3\">Don't have an account? <a href=\"#\" class=\"dark-grey-text ml-1 font-weight-bold\"> Sign up</a></p>\n            </div>\n          </div>\n        </div>\n        </div>\n        </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}